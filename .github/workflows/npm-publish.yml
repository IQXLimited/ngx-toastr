name: Build and Publish to NPM

on:
  push:
    branches:
      - master   # only run when PRs are merged into master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_CHECKOUT_PAT }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: PUPPETEER_SKIP_DOWNLOAD=true npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version type from PR title
        id: version_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Use the manually selected version type
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          else
            # Get the most recent merge commit message (which contains PR title)
            PR_TITLE=$(git log --oneline -1 --pretty=format:"%s")
            echo "PR Title: $PR_TITLE"

            # Check for version indicators in PR title (case insensitive)
            if echo "$PR_TITLE" | grep -iE '\[major\]|major:|BREAKING' > /dev/null; then
              VERSION_TYPE="major"
              echo "Detected MAJOR version from PR title"
            elif echo "$PR_TITLE" | grep -iE '\[minor\]|minor:|feat:' > /dev/null; then
              VERSION_TYPE="minor"
              echo "Detected MINOR version from PR title"
            else
              VERSION_TYPE="patch"
              echo "Using default PATCH version"
            fi
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Selected version type: $VERSION_TYPE"

      - name: Increment version
        id: version
        run: |
          VERSION_TYPE="${{ steps.version_type.outputs.version_type }}"
          npm version $VERSION_TYPE --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Update the library's package.json version too
          node -e "
            const fs = require('fs');
            const libPkg = JSON.parse(fs.readFileSync('src/lib/package.json', 'utf8'));
            libPkg.version = '$NEW_VERSION';
            fs.writeFileSync('src/lib/package.json', JSON.stringify(libPkg, null, 2) + '\n');
          "

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (incremented as $VERSION_TYPE)"

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        run: npm publish ./dist --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit version change
        run: |
          git add package.json package-lock.json src/lib/package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin master --tags